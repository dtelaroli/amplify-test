type Task
  # dynamodb table
  @model
  # dynamodb key
  @key(name: "byTitle", fields: ["title", "createdAt"])
  # elastic search service
  @searchable
  # cognito auth
  @auth(
    rules: [
      { allow: groups, groups: ["Managers"], queries: [list], mutations: [create, update, delete] }
      { allow: groups, groups: ["Employees"], queries: [get, list], mutations: null }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  status: TaskStatus!
  createdAt: AWSDateTime!
}

type PrivateNote @model @auth(rules: [{ allow: owner }]) {
  id: ID!
  content: String!
}

type Custom {
  id: ID!
  name: String!
}

type Query {
  # lambda datasource in amplify function
  fetchCustom(id: String!): Custom! @function(name: "custom-${env}")
}

type Payload {
  name: String!
}

type Mutation {
  # http datasource
  execHttp(name: String!): AWSJSON @http(method: POST, url: "https://a35vq1nx12.execute-api.us-east-1.amazonaws.com/Prod/test")
  # lambda datasource in another service
  execFunction: AWSJSON @function(name: "ApiGatewayPayloadLogger")
}

enum TaskStatus {
  PENDING
  DOING
  COMPLETE
}
